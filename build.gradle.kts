plugins {
    java
    alias(libs.plugins.quarkus)
    alias(libs.plugins.openapi.generator)
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation(enforcedPlatform(libs.quarkus.bom))
    implementation(libs.quarkus.rest)
    implementation(libs.quarkus.arc)
    implementation(libs.quarkus.rest.jackson)
    implementation(libs.quarkus.smallrye.openapi)

    implementation(libs.stripe)

    implementation(libs.commons.validator)
    implementation(libs.jakarta.validation)
    implementation(libs.swagger.annotations)
    testImplementation(libs.quarkus.junit5)
    testImplementation(libs.rest.assured)
}

val openapiResourcesPath : String = "$rootDir/src/main/resources/openapi/"
val openapiOutputDirPath : String = "generated/openapi"
openApiGenerate {
    generatorName.set("jaxrs-spec")
    inputSpec.set("$openapiResourcesPath/openapi.yaml")
    outputDir.set(layout.buildDirectory.dir(openapiOutputDirPath).get().asFile.absolutePath)
    apiPackage.set("org.demo.psp.api")
    modelPackage.set("org.demo.psp.dto")
    modelNameSuffix.set("DTO")
    configFile.set("$openapiResourcesPath/config.yaml")
}

sourceSets {
    main {
        java {
            // To make Gradle treats the folder generated by openapi like any other source directory
            srcDir(layout.buildDirectory.dir("$openapiOutputDirPath/src/gen/java"))
        }
    }
}

group = "org.demo.psp"
version = "1.0.0-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType<Test> {
    systemProperty("java.util.logging.manager", "org.jboss.logmanager.LogManager")
}
tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}
tasks.compileJava {
    dependsOn(tasks.openApiGenerate)
}
